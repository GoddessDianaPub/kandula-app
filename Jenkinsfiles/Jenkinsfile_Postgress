def notifySlack(buildStatus = null) {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'
    def color

    if (buildStatus == 'SUCCESS') {
        color = '#5dff54'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#fffe89'
    } else {
        color = '#ff0000'
    }

    def msg = "${buildStatus}:\nJob Name: ${env.JOB_NAME}\nBuild Number #${env.BUILD_NUMBER}"
    slackSend(color: color, message: msg, channel: '#jenkins-notifications')
}

pipeline {
    agent {
        node {
            label 'linux'
        }
    }
    
    environment {
        REPO_URL          = "https://github.com/GoddessDianas/kandula-app.git"
     	KANDULA_NAME      = "kandula"
        HOST              = "rds-db-instance-0.cihzevxi90ql.us-east-1.rds.amazonaws.com"
        PORT              = "5432"
        DATABASE_USER     = "diana"
        DATABASE_PASSWORD = credentials('database_password')
    }
    
    stages {
        stage('Cloning Git') {
            steps {
                git url: "${REPO_URL}", branch: 'main', credentialsId: 'Github_token'
            }
        }

		stage('Install PostgreSQL') {
			steps {
				script {
					def postgresqlInstalled = sh(script: 'dpkg -s postgresql', returnStatus: true)
		
					if (postgresqlInstalled == 0) {
						echo "PostgreSQL is already installed"
					} else {
						sh 'sudo apt-get update'
						sh 'sudo apt-get install postgresql -y'
					}
				}
			}
		}
        
		stage('Create Database') {
			steps {
				sh """
					echo '${DATABASE_PASSWORD}' | psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "SELECT 1 FROM pg_database WHERE datname='${KANDULA_NAME}';" -W | grep -q 1 ||
					echo '${DATABASE_PASSWORD}' | psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "CREATE DATABASE ${KANDULA_NAME};" -W
				"""
			}
		}

		
        
		stage('Create Schema') {
			steps {
				sh """
					echo '${DATABASE_PASSWORD}' | psql -h ${HOST} -p ${PORT} -d ${KANDULA_NAME} -U ${DATABASE_USER} -c "SELECT 1 FROM pg_namespace WHERE nspname='${KANDULA_NAME}';" -W | grep -q 1 ||
					echo '${DATABASE_PASSWORD}' | psql -h ${HOST} -p ${PORT} -d ${KANDULA_NAME} -U ${DATABASE_USER} -c "CREATE SCHEMA ${KANDULA_NAME};" -W
				"""
				sh "echo '${DATABASE_PASSWORD}' | psql -h ${HOST} -p ${PORT} -d ${KANDULA_NAME} -U ${DATABASE_USER} -c 'GRANT ALL PRIVILEGES ON SCHEMA ${KANDULA_NAME} TO public';" -W
					}
				}

				
		stage('Create shutdown table') {
			steps {
				script {
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d ${KANDULA_NAME} -U ${DATABASE_USER} -c "CREATE TABLE IF NOT EXISTS ${KANDULA_NAME}.instances_scheduler (instance_id VARCHAR(255) PRIMARY KEY, shutdown_time TIME);" -W
						"""
					} catch (Exception e) {
						echo "Table ${KANDULA_NAME}.instances_scheduler already exists."
					}
				}
			}
		}
   
	    		
		stage('Create log table') {
			steps {
				script {
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | psql -h ${HOST} -p ${PORT} -d ${KANDULA_NAME} -U ${DATABASE_USER} -c "CREATE TABLE ${KANDULA_NAME}.instances_shutdown_log (log_id SERIAL PRIMARY KEY, instance_id VARCHAR(255), log_timestamp TIMESTAMP, FOREIGN KEY (instance_id) REFERENCES ${KANDULA_NAME}.instances_scheduler(instance_id));" -W
						"""
					} catch (Exception e) {
						echo "Table ${KANDULA_NAME}.instances_shutdown_log already exists."
					}
				}
			}
		}

        
		stage('Setup User and Role') {
			steps {
				script {
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "CREATE ROLE readwrite;" -W
						"""
					} catch (Exception e) {
						echo "Role 'readwrite' already exists."
					}
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "CREATE USER ${KANDULA_NAME} WITH PASSWORD '${DATABASE_PASSWORD}';" -W
						"""
					} catch (Exception e) {
						echo "User '${KANDULA_NAME}' already exists."
					}
				}
			}
		}


		stage('Grant Permissions') {
			steps {
				script {
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d ${KANDULA_NAME} -U ${DATABASE_USER} -c "GRANT CONNECT ON DATABASE ${KANDULA_NAME} TO readwrite;"
						"""
					} catch (Exception e) {
						echo "Permissions 'GRANT CONNECT ON DATABASE ${KANDULA_NAME} TO readwrite' already exist."
					}
					
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d ${KANDULA_NAME} -U ${DATABASE_USER} -c "GRANT USAGE ON SCHEMA ${KANDULA_NAME} TO readwrite;"
						"""
					} catch (Exception e) {
						echo "Permissions 'GRANT USAGE ON SCHEMA ${KANDULA_NAME} TO readwrite' already exist."
					}
					
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE ${KANDULA_NAME}.instances_scheduler TO readwrite;"
						"""
					} catch (Exception e) {
						echo "Permissions 'GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE ${KANDULA_NAME}.instances_scheduler TO readwrite' already exist."
					}
					
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "GRANT USAGE ON ALL SEQUENCES IN SCHEMA ${KANDULA_NAME} TO readwrite;"
						"""
					} catch (Exception e) {
						echo "Permissions 'GRANT USAGE ON ALL SEQUENCES IN SCHEMA ${KANDULA_NAME} TO readwrite' already exist."
					}
					
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "GRANT readwrite TO ${KANDULA_NAME};"
						"""
					} catch (Exception e) {
						echo "Permissions 'GRANT readwrite TO ${KANDULA_NAME}' already exist."
					}
					
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "ALTER DEFAULT PRIVILEGES IN SCHEMA ${KANDULA_NAME} GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO readwrite;"
						"""
					} catch (Exception e) {
						echo "Permissions 'ALTER DEFAULT PRIVILEGES IN SCHEMA ${KANDULA_NAME}' already exist."
					}
					
					try {
						sh """
							echo '${DATABASE_PASSWORD}' | PGPASSWORD="${DATABASE_PASSWORD}" psql -h ${HOST} -p ${PORT} -d postgres -U ${DATABASE_USER} -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA ${KANDULA_NAME} TO readwrite;"
						"""
					} catch (Exception e) {
						echo "Permissions 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA ${KANDULA_NAME} TO readwrite' already exist."
					}	
				}
			}
		}

    }
        
    post {
        always {
            notifySlack(currentBuild.result)
            script {
                deleteDir() // built-in step to clean up the workspace
            }
        }
    }
}



