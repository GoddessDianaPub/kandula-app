def notifySlack(buildStatus = null) {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'
    def color

    if (buildStatus == 'SUCCESS') {
        color = '#5dff54'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#fffe89'
    } else {
        color = '#ff0000'
    }

    def msg = "${buildStatus}:\nJob Name: ${env.JOB_NAME}\nBuild Number #${env.BUILD_NUMBER}"
    slackSend(color: color, message: msg, channel: '#jenkins-notifications')
}

pipeline {
    agent {
        node {
            label 'linux'
        }
    }
    
    environment {
        AWS_ACCOUNT_ID        = "735911875499"
        AWS_DEFAULT_REGION    = "us-east-1"
        IMAGE_REPO_NAME       = "kandula"
        REPO_URL              = "https://github.com/GoddessDianas/kandula-app.git"
        REPO_DIR              = "kandula-app-k8s"
        CLUSTER_NAME          = "opsschool-eks-QP4igSZ5"
    }
    
    stages {
        stage('Cloning Git') {
            steps {
                git url: "${REPO_URL}", branch: 'main', credentialsId: 'Github_token'
            }
        } 
        
        stage("Login to EKS") {
            steps {
                withKubeConfig(credentialsId: 'eks.cred', serverUrl: 'https://your-eks-api-server-url', clusterName: 'your-eks-cluster-name') {
                    // Run any Kubernetes commands you need to perform
                }
            }
        }
        
        stage('Deploy Prometheus') {
            steps {
                script {
                    // Add Prometheus Helm repository
                    sh 'helm repo add prometheus-community https://prometheus-community.github.io/helm-charts'
                    
                    // Update Helm repositories
                    sh 'helm repo update'
                    
                    // Install Prometheus using Helm
                    sh 'helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace'
                }
            }
        }
    }
    
    post {
        always {
            notifySlack(currentBuild.result)
            script {
                deleteDir() // built-in step to clean up the workspace
            }
        }
    }
}
